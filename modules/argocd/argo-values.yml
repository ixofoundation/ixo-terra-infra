repoServer:
  volumes:
    - configMap:
        name: argocd-cmp-cm
      name: cmp-plugin
    - name: custom-tools
      emptyDir: { }
  extraContainers:
    - name: avp
      command: [ /var/run/argocd/argocd-cmp-server ]
      image: registry.access.redhat.com/ubi8
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp

        # Register plugins into sidecar
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: avp.yaml
          name: cmp-plugin

        # Important: Mount tools into $PATH
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin
  initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
        - name: AVP_VERSION
          value: ${AVP_VERSION}
      command: [ sh, -c ]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
configs:
  cmp:
    create: true
    plugins:
      "avp":
        allowConcurrency: true
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name 'Chart.yaml' && find . -name 'values.yaml'"
        generate:
          command:
            - sh
            - "-c"
            - |
              helm template $ARGOCD_APP_NAME --include-crds . |
              argocd-vault-plugin generate -
        lockRepo: false
  params:
    server.rootpath: /argocd
applicationSet:
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
controller:
  resources:
    limits:
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 512Mi
server:
  certificate:
    enabled: true
    domain: ${host}
    issuer:
      group: cert-manager.io
      kind: ClusterIssuer
      name: letsencrypt-staging
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 125m
      memory: 128Mi
  replicas: 2
  pdb:
    enabled: true
    labels:
      app: argocd-server
    minAvailable: 2
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      ingress.kubernetes.io/proxy-body-size: 100M
    ingressClassName: nginx
    hostname: ${host}
    path: /argocd
    tls: true
  podLabels:
    app: argocd-server
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          app: argocd-server